# Generated by Django 5.1.3 on 2024-11-27 18:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='IoMts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_Iot', models.CharField(max_length=255, verbose_name='Type IoMt')),
            ],
            options={
                'verbose_name': 'Objet connecté',
                'verbose_name_plural': 'Objets connectés',
            },
        ),
        migrations.CreateModel(
            name='Personne',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255, verbose_name='Nom')),
                ('prenom', models.CharField(max_length=255, verbose_name='Prenom')),
                ('sexe', models.CharField(blank=True, choices=[('M', 'Masculin'), ('F', 'Feminin')], max_length=1, null=True, verbose_name='Sexe')),
            ],
            options={
                'verbose_name': 'Identité',
                'verbose_name_plural': 'Identités',
            },
        ),
        migrations.CreateModel(
            name='Docteur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('utilisateur_dr', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Docteur')),
                ('identite_dr', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='identite_dr', to='Afia.personne', verbose_name='Identité')),
            ],
            options={
                'verbose_name': 'Docteur',
                'verbose_name_plural': 'Docteurs',
            },
        ),
        migrations.CreateModel(
            name='Patients',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_naissance', models.DateField(verbose_name='Date de naissance')),
                ('poids', models.FloatField(blank=True, verbose_name='Poids')),
                ('taille', models.FloatField(blank=True, verbose_name='Taille')),
                ('Iot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Afia.iomts', verbose_name='Iot device')),
                ('utilisateur_patient', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Patient')),
                ('identite_patient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='identite_patient', to='Afia.personne', verbose_name='Identité')),
            ],
            options={
                'verbose_name': 'Patient',
                'verbose_name_plural': 'Patients',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('from_patient', models.BooleanField(verbose_name='envoyer par le patient')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('docteur_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_session', to='Afia.docteur')),
                ('patient_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_session', to='Afia.patients')),
            ],
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_heure', models.DateTimeField(auto_now=True)),
                ('valeur', models.FloatField()),
                ('prediction_modele', models.FloatField(blank=True, null=True)),
                ('patient', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='Afia.patients', verbose_name='Patient')),
            ],
            options={
                'verbose_name': 'Prediction',
                'verbose_name_plural': 'Predictions',
                'ordering': ['patient', 'date_heure'],
            },
        ),
        migrations.CreateModel(
            name='Prelevement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_heure', models.DateField(auto_now=True)),
                ('saturation_O', models.FloatField(blank=True, null=True, verbose_name='Saturation en oxygène')),
                ('pression_A', models.CharField(blank=True, max_length=20, null=True, verbose_name='Pression Arterielle')),
                ('temperature', models.FloatField(verbose_name='Temperature')),
                ('frequence_C', models.IntegerField(blank=True, null=True, verbose_name='Frequence Cardiaque')),
                ('patient', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='Afia.patients', verbose_name='Patient')),
            ],
            options={
                'verbose_name': 'Prélevement',
                'verbose_name_plural': 'Prélevements',
                'ordering': ['date_heure', 'saturation_O', 'pression_A', 'frequence_C', 'temperature'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
